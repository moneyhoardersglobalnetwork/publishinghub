{
  "address": "0xbf083dEd513f32A144627fEa9782a4d3d5fefe28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_creationFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NothingToWithdraw",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "coverIpfsCid",
          "type": "string"
        }
      ],
      "name": "BookCoverIpfsCidSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bookIpfsCid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "coverIpfsCid",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "BookCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "bookIpfsCid",
          "type": "string"
        }
      ],
      "name": "BookIpfsCidSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "BookPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BookPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "CreationFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCopies",
          "type": "uint256"
        }
      ],
      "name": "MaxCopiesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bookAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "books",
      "outputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bookIpfsCid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "coverIpfsCid",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCopies",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "bookPrice",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "bookIpfsCid",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "coverIpfsCid",
          "type": "string"
        }
      ],
      "name": "createBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeForCreation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercentageForPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBookAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        }
      ],
      "name": "getBookCoverIpfsCid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        }
      ],
      "name": "getBookIpfsCid",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        }
      ],
      "name": "getBookPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasMintedBefore",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minter_AllTime_Minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "purchaseBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newIpfsCid",
          "type": "string"
        }
      ],
      "name": "setBookCoverIpfsCid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newIpfsCid",
          "type": "string"
        }
      ],
      "name": "setBookIpfsCid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setBookPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCopies",
          "type": "uint256"
        }
      ],
      "name": "setMaxCopies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x901cd60fc43061a22b85fc779b94e5b52fb5ed93de8921ff3ad02c5c77ce9d84",
  "receipt": {
    "to": null,
    "from": "0xEf353eC37ed86CF28cfb29925748B202B51110C6",
    "contractAddress": "0xbf083dEd513f32A144627fEa9782a4d3d5fefe28",
    "transactionIndex": 0,
    "gasUsed": "4689602",
    "logsBloom": "0x
    "blockHash": "0xe5546fc1a055a5a1f1938cbd514f1af6df47620dddbbdb266c359da742df9c5f",
    "transactionHash": "0x901cd60fc43061a22b85fc779b94e5b52fb5ed93de8921ff3ad02c5c77ce9d84",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8159715,
        "transactionHash": "0x901cd60fc43061a22b85fc779b94e5b52fb5ed93de8921ff3ad02c5c77ce9d84",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ef353ec37ed86cf28cfb29925748b202b51110c6",
          "0x0000000000000000000000006ab3d36c46ecfb9b9c0bd51cb1c3da5a2c81cea6"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002621c0f15afd2c0000000000000000000000000000000000000000000000000f27c68bcf91e8e00000000000000000000000000000000000000000000001b738d23b37993e68c00000000000000000000000000000000000000000000000000f01a4cade36ebb40000000000000000000000000000000000000000000001b738f85cf88a9965ec",
        "logIndex": 0,
        "blockHash": "0xe5546fc1a055a5a1f1938cbd514f1af6df47620dddbbdb266c359da742df9c5f"
      }
    ],
    "blockNumber": 8159715,
    "cumulativeGasUsed": "4689602",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEf353eC37ed86CF28cfb29925748B202B51110C6",
    0
  ],
  "numDeployments": 4,
  "solcInputHash": "f9a4d54626ebe79cb4d3b5037081ecb8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_creationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coverIpfsCid\",\"type\":\"string\"}],\"name\":\"BookCoverIpfsCidSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bookIpfsCid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coverIpfsCid\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"BookCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"bookIpfsCid\",\"type\":\"string\"}],\"name\":\"BookIpfsCidSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"BookPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BookPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"CreationFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCopies\",\"type\":\"uint256\"}],\"name\":\"MaxCopiesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bookAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"books\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bookIpfsCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverIpfsCid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCopies\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bookPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bookIpfsCid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coverIpfsCid\",\"type\":\"string\"}],\"name\":\"createBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeForCreation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentageForPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllBookAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"}],\"name\":\"getBookCoverIpfsCid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"}],\"name\":\"getBookIpfsCid\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"}],\"name\":\"getBookPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasMintedBefore\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minter_AllTime_Minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchaseBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newIpfsCid\",\"type\":\"string\"}],\"name\":\"setBookCoverIpfsCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newIpfsCid\",\"type\":\"string\"}],\"name\":\"setBookIpfsCid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setBookPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCopies\",\"type\":\"uint256\"}],\"name\":\"setMaxCopies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BookFactory.sol\":\"BookFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Book.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\n\\ncontract Book is ERC721URIStorage, Ownable {\\n    struct BookInfo {\\n        address bookAddress;\\n        string name;\\n        string symbol;\\n        uint256 price;\\n        string baseURI;\\n        string bookIpfsCid;\\n        string coverIpfsCid;\\n        address creator;\\n        uint256 maxCopies;\\n        uint256 totalSupply;\\n    }\\n\\nstruct Minter {\\n        uint256 minted;\\n        uint256 mintedAtBlock;\\n        bool hasMintedBefore;\\n        uint256 minter_AllTime_Minted;\\n    }\\n\\n\\n    mapping(address => Minter) public minters;\\n    uint256 public feePercentageForPurchase = 1; // 1% fee for book purchases\\n    uint256 public feeForCreation; // Fee for creating a new book\\n\\n    address[] public bookAddresses;\\n    mapping(address => BookInfo) public books;\\n\\n\\tusing Counters for Counters.Counter;\\n\\tCounters.Counter private _tokenIdCounter;\\n\\n\\tuint256 public bookPrice;\\n\\tstring internal customBaseURI;\\n\\tstring internal bookIpfsCid;\\n\\tbool private isBookIpfsCidSet;\\n\\n\\tmapping(uint256 => uint256) public maxCopies;\\n\\n     event BookCreated(\\n        address indexed bookAddress,\\n        string tokenName,\\n        string symbol,\\n        string baseURI,\\n        string bookIpfsCid,\\n        string coverIpfsCid,\\n        address creator\\n    );\\n    event BookPurchased(\\n        address indexed buyer,\\n        address indexed bookAddress,\\n        uint256 tokenId\\n    );\\n\\n    event BookIpfsCidSet(address indexed bookAddress, string bookIpfsCid);\\n    event BookCoverIpfsCidSet(address indexed bookAddress, string coverIpfsCid);\\n    event BookPriceUpdated(address indexed bookAddress, uint256 newPrice);\\n    event CreationFeeUpdated(uint256 newFee);\\n    event MaxCopiesUpdated(address indexed bookAddress, uint256 maxCopies);\\n\\n\\tconstructor(\\n\\t\\tstring memory tokenName,\\n\\t\\tstring memory symbol,\\n\\t\\tuint256 _bookPrice,\\n\\t\\tstring memory baseURI_,\\n\\t\\taddress addressOwner\\n\\t) ERC721(tokenName, symbol) {\\n\\t\\tbookPrice = _bookPrice;\\n\\t\\tcustomBaseURI = baseURI_;\\n\\t\\ttransferOwnership(addressOwner);\\n\\t}\\n\\n\\tfunction setBookIpfsCid(string memory newIpfsCid, address author) external {\\n\\t\\trequire(author == owner(), \\\"Not the owner\\\");\\n\\t\\trequire(!isBookIpfsCidSet, \\\"bookIpfsCid has already been set\\\");\\n\\t\\tbookIpfsCid = newIpfsCid;\\n\\t\\tisBookIpfsCidSet = true;\\n\\t}\\n\\n     function setBookCoverIpfsCid(\\n        address bookAddress,\\n        string memory newIpfsCid\\n    ) public {\\n        BookInfo storage bookToSetCoverIpfsCid = books[bookAddress];\\n        require(\\n            bookToSetCoverIpfsCid.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        Book bookInstance = Book(bookAddress);\\n        require(\\n            msg.sender == bookInstance.owner(),\\n            \\\"Only book owner can set cover IPFS CID\\\"\\n        );\\n\\n        bookToSetCoverIpfsCid.coverIpfsCid = newIpfsCid;\\n        emit BookCoverIpfsCidSet(bookAddress, newIpfsCid);\\n    }\\n\\n\\tfunction purchaseBook(address buyer) public payable returns (uint256) {\\n\\t\\trequire(msg.value == bookPrice, \\\"Incorrect price\\\");\\n\\n\\t\\tuint256 tokenId = _tokenIdCounter.current();\\n\\t\\trequire(\\n\\t\\t\\ttotalSupply(tokenId) < maxCopies[tokenId],\\n\\t\\t\\t\\\"Maximum copies reached for this token ID\\\"\\n\\t\\t);\\n\\n\\t\\t_tokenIdCounter.increment();\\n\\t\\t_safeMint(buyer, tokenId);\\n\\n\\t\\treturn tokenId;\\n\\t}\\n\\n\\tfunction _baseURI() internal view virtual override returns (string memory) {\\n\\t\\treturn customBaseURI;\\n\\t}\\n\\n\\tfunction getBookIpfsCid() external view returns (string memory) {\\n\\t\\treturn bookIpfsCid;\\n\\t}\\n\\n\\tfunction setMaxCopies(\\n\\t\\tuint256 tokenId,\\n\\t\\tuint256 _maxCopies\\n\\t) external onlyOwner {\\n\\t\\trequire(_maxCopies > 0, \\\"Max copies must be greater than zero\\\");\\n\\t\\tmaxCopies[tokenId] = _maxCopies;\\n\\t}\\n\\n\\tfunction totalSupply(uint256 tokenId) public view returns (uint256) {\\n\\t\\treturn _tokenIdCounter.current() - tokenId;\\n\\t}\\n}\\n\",\"keccak256\":\"0x6c7f483053d470cf0a6698c47587468ef1d7c802749648d6755890a6cf399ba8\",\"license\":\"MIT\"},\"contracts/BookFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Book.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract BookFactory {\\n    struct BookInfo {\\n        address bookAddress;\\n        string name;\\n        string symbol;\\n        uint256 price;\\n        string baseURI;\\n        string bookIpfsCid;\\n        string coverIpfsCid;\\n        address creator;\\n        uint256 maxCopies;\\n        uint256 totalSupply;\\n    }\\n\\n    struct Minter {\\n        uint256 minted;\\n        uint256 mintedAtBlock;\\n        bool hasMintedBefore;\\n        uint256 minter_AllTime_Minted;\\n    }\\n\\n    IERC20 public usdcToken;\\n    address public owner;\\n    mapping(address => Minter) public minters;\\n    uint256 public feePercentageForPurchase = 1; // 1% fee for book purchases\\n    uint256 public feeForCreation; // Fee for creating a new book\\n\\n    address[] public bookAddresses;\\n    mapping(address => BookInfo) public books;\\n\\n    event BookCreated(\\n        address indexed bookAddress,\\n        string tokenName,\\n        string symbol,\\n        string baseURI,\\n        string bookIpfsCid,\\n        string coverIpfsCid,\\n        address creator\\n    );\\n    event BookPurchased(\\n        address indexed buyer,\\n        address indexed bookAddress,\\n        uint256 tokenId\\n    );\\n    event BookIpfsCidSet(address indexed bookAddress, string bookIpfsCid);\\n    event BookCoverIpfsCidSet(address indexed bookAddress, string coverIpfsCid);\\n    event BookPriceUpdated(address indexed bookAddress, uint256 newPrice);\\n    event CreationFeeUpdated(uint256 newFee);\\n    event MaxCopiesUpdated(address indexed bookAddress, uint256 maxCopies);\\n\\n    error NothingToWithdraw();\\n\\n    constructor(address _owner, uint256 _creationFee) {\\n        usdcToken = IERC20(0xc4BdC44885Ca364962272E5Fd026C05Be9AD924A);\\n        owner = _owner;\\n        feeForCreation = _creationFee;\\n    }\\n\\n    function createBook(\\n        string memory name,\\n        string memory symbol,\\n        uint256 bookPrice,\\n        string memory baseURI,\\n        string memory bookIpfsCid,\\n        string memory coverIpfsCid\\n    ) public returns (address) {\\n        require(\\n            usdcToken.transferFrom(msg.sender, address(this), feeForCreation),\\n            \\\"USDC transfer for creation fee failed\\\"\\n        );\\n\\n        Book newBook = new Book(name, symbol, bookPrice, baseURI, msg.sender);\\n\\n        BookInfo memory newBookInfo = BookInfo({\\n            bookAddress: address(newBook),\\n            name: name,\\n            symbol: symbol,\\n            price: bookPrice,\\n            baseURI: baseURI,\\n            bookIpfsCid: bookIpfsCid,\\n            coverIpfsCid: coverIpfsCid,\\n            creator: msg.sender,\\n            maxCopies: 1000, // Default maximum copies\\n            totalSupply: 0 // Default total supply\\n        });\\n\\n        books[address(newBook)] = newBookInfo;\\n        bookAddresses.push(address(newBook));\\n\\n        emit BookCreated(\\n            address(newBook),\\n            name,\\n            symbol,\\n            baseURI,\\n            bookIpfsCid,\\n            coverIpfsCid,\\n            msg.sender\\n        );\\n    }\\n\\n    function setBookIpfsCid(\\n        address bookAddress,\\n        string memory newIpfsCid\\n    ) public {\\n        BookInfo storage bookToSetIpfsCid = books[bookAddress];\\n        require(\\n            bookToSetIpfsCid.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        Book bookInstance = Book(bookAddress);\\n        require(\\n            msg.sender == bookInstance.owner(),\\n            \\\"Only book owner can set IPFS CID\\\"\\n        );\\n\\n        bookInstance.setBookIpfsCid(newIpfsCid, msg.sender);\\n        bookToSetIpfsCid.bookIpfsCid = newIpfsCid;\\n        emit BookIpfsCidSet(bookAddress, newIpfsCid);\\n    }\\n\\n    function setBookCoverIpfsCid(\\n        address bookAddress,\\n        string memory newIpfsCid\\n    ) public {\\n        BookInfo storage bookToSetCoverIpfsCid = books[bookAddress];\\n        require(\\n            bookToSetCoverIpfsCid.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        Book bookInstance = Book(bookAddress);\\n        require(\\n            msg.sender == bookInstance.owner(),\\n            \\\"Only book owner can set cover IPFS CID\\\"\\n        );\\n\\n        bookToSetCoverIpfsCid.coverIpfsCid = newIpfsCid;\\n        emit BookCoverIpfsCidSet(bookAddress, newIpfsCid);\\n    }\\n\\n\\tfunction purchaseBook(address bookAddress, uint256 amount) public {\\n\\t\\tBookInfo memory bookToPurchase = books[bookAddress];\\n\\t\\trequire(\\n\\t\\t\\tbookToPurchase.bookAddress != address(0),\\n\\t\\t\\t\\\"Book does not exist\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 price = bookToPurchase.price;\\n\\t\\trequire(price > 0, \\\"Book price not set\\\");\\n\\n\\t\\tuint256 feeAmount = (price * feePercentageForPurchase) / 100;\\n\\t\\tuint256 payoutAmount = price - feeAmount;\\n\\n\\t\\tbool success = usdcToken.transferFrom(msg.sender, address(this), price);\\n\\t\\trequire(success, \\\"USDC transfer failed\\\");\\n\\n\\t\\tusdcToken.transfer(bookToPurchase.creator, payoutAmount);\\n\\n\\t\\tBook bookInstance = Book(bookAddress);\\n\\t\\tuint256 tokenId = bookInstance.purchaseBook(msg.sender);\\n\\t\\trequire(\\n\\t\\t\\tbookInstance.totalSupply(0) <= bookToPurchase.maxCopies,\\n\\t\\t\\t\\\"Maximum copies reached\\\"\\n\\t\\t);\\n\\t\\temit BookPurchased(msg.sender, bookAddress, tokenId);\\n\\t}\\n\\n    function setBookPrice(address bookAddress, uint256 newPrice) public {\\n        BookInfo storage bookToSetPrice = books[bookAddress];\\n        require(\\n            bookToSetPrice.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        Book bookInstance = Book(bookAddress);\\n        require(\\n            msg.sender == bookInstance.owner(),\\n            \\\"Only book owner can set price\\\"\\n        );\\n\\n        bookToSetPrice.price = newPrice;\\n        emit BookPriceUpdated(bookAddress, newPrice);\\n    }\\n\\n    function setMaxCopies(address bookAddress, uint256 maxCopies) public {\\n        BookInfo storage bookToSetMaxCopies = books[bookAddress];\\n        require(\\n            bookToSetMaxCopies.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        Book bookInstance = Book(bookAddress);\\n        require(\\n            msg.sender == bookInstance.owner(),\\n            \\\"Only book owner can set max copies\\\"\\n        );\\n        require(maxCopies > 0, \\\"Max copies must be greater than zero\\\");\\n\\n        bookToSetMaxCopies.maxCopies = maxCopies;\\n        emit MaxCopiesUpdated(bookAddress, maxCopies);\\n    }\\n\\n    function getBookPrice(address bookAddress) public view returns (uint256) {\\n        BookInfo memory bookToGetPrice = books[bookAddress];\\n        require(\\n            bookToGetPrice.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        return bookToGetPrice.price;\\n    }\\n\\n    function getBookIpfsCid(\\n        address bookAddress\\n    ) public view returns (string memory) {\\n        BookInfo memory bookToGetIpfsCid = books[bookAddress];\\n        require(\\n            bookToGetIpfsCid.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        return bookToGetIpfsCid.bookIpfsCid;\\n    }\\n\\n    function getBookCoverIpfsCid(\\n        address bookAddress\\n    ) public view returns (string memory) {\\n        BookInfo memory bookToGetCoverIpfsCid = books[bookAddress];\\n        require(\\n            bookToGetCoverIpfsCid.bookAddress != address(0),\\n            \\\"Book does not exist\\\"\\n        );\\n\\n        return bookToGetCoverIpfsCid.coverIpfsCid;\\n    }\\n\\n    function getAllBookAddresses() public view returns (address[] memory) {\\n        return bookAddresses;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function setCreationFee(uint256 newFee) public onlyOwner {\\n        feeForCreation = newFee;\\n        emit CreationFeeUpdated(newFee);\\n    }\\n\\n    function withdrawToken(\\n        address _beneficiary,\\n        address _token\\n    ) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount == 0) revert NothingToWithdraw();\\n        IERC20(_token).transfer(_beneficiary, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd89e28a458a98a0be643b3f493f7ec21923484fb49ec53bb8308384530a59742\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001395760003560e01c80636b312bbd11620000bb5780638da5cb5b116200007a5780638da5cb5b14620002b8578063a637107c14620002cc578063b7d8622514620002e5578063f46eccc414620002fc578063f8392282146200036057600080fd5b80636b312bbd146200023a578063733f6dc0146200025157806374eb1e5f14620002685780637800a7ef14620002975780637e70277914620002a157600080fd5b806317409fe0116200010857806317409fe014620001b857806318bca11314620001cf5780633aeac4e114620001f55780633f776688146200020c5780634111f0ec146200022357600080fd5b806306e21956146200013e57806311eac855146200015b578063129495d41462000188578063136f083b14620001a1575b600080fd5b6200014860035481565b6040519081526020015b60405180910390f35b6000546200016f906001600160a01b031681565b6040516001600160a01b03909116815260200162000152565b6200019f62000199366004620023a0565b62000377565b005b6200019f620001b2366004620023a0565b62000a53565b6200019f620001c93660046200247a565b62000c11565b620001e6620001e0366004620024d0565b62000dcb565b6040516200015291906200253f565b6200019f6200020636600462002554565b62001165565b620001e66200021d366004620024d0565b6200128b565b6200016f6200023436600462002592565b62001625565b620001486200024b366004620024d0565b62001916565b6200019f62000262366004620023a0565b62001cb4565b6200027f62000279366004620024d0565b62001e00565b604051620001529a999897969594939291906200267c565b6200014860045481565b6200019f620002b23660046200247a565b62002133565b6001546200016f906001600160a01b031681565b620002d662002297565b60405162000152919062002726565b6200019f620002f636600462002775565b620022fb565b620003396200030d366004620024d0565b6002602081905260009182526040909120805460018201549282015460039092015490929160ff169084565b60408051948552602085019390935290151591830191909152606082015260800162000152565b6200016f6200037136600462002775565b6200234e565b6001600160a01b0380831660009081526006602090815260408083208151610140810190925280549094168152600184018054939491939192840191620003be906200278f565b80601f0160208091040260200160405190810160405280929190818152602001828054620003ec906200278f565b80156200043d5780601f1062000411576101008083540402835291602001916200043d565b820191906000526020600020905b8154815290600101906020018083116200041f57829003601f168201915b5050505050815260200160028201805462000458906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462000486906200278f565b8015620004d75780601f10620004ab57610100808354040283529160200191620004d7565b820191906000526020600020905b815481529060010190602001808311620004b957829003601f168201915b5050505050815260200160038201548152602001600482018054620004fc906200278f565b80601f01602080910402602001604051908101604052809291908181526020018280546200052a906200278f565b80156200057b5780601f106200054f576101008083540402835291602001916200057b565b820191906000526020600020905b8154815290600101906020018083116200055d57829003601f168201915b5050505050815260200160058201805462000596906200278f565b80601f0160208091040260200160405190810160405280929190818152602001828054620005c4906200278f565b8015620006155780601f10620005e95761010080835404028352916020019162000615565b820191906000526020600020905b815481529060010190602001808311620005f757829003601f168201915b5050505050815260200160068201805462000630906200278f565b80601f01602080910402602001604051908101604052809291908181526020018280546200065e906200278f565b8015620006af5780601f106200068357610100808354040283529160200191620006af565b820191906000526020600020905b8154815290600101906020018083116200069157829003601f168201915b505050918352505060078201546001600160a01b03908116602083015260088301546040830152600990920154606090910152815191925016620007105760405162461bcd60e51b81526004016200070790620027cb565b60405180910390fd5b606081015180620007595760405162461bcd60e51b8152602060048201526012602482015271109bdbdac81c1c9a58d9481b9bdd081cd95d60721b604482015260640162000707565b60006064600354836200076d91906200280e565b6200077991906200282e565b9050600062000789828462002851565b600080546040516323b872dd60e01b81523360048201523060248201526044810187905292935090916001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015620007e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080d919062002867565b905080620008555760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b604482015260640162000707565b60005460e086015160405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb906044016020604051808303816000875af1158015620008ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d3919062002867565b50604051600162f5be1b60e01b0319815233600482015287906000906001600160a01b0383169063ff0a41e5906024016020604051808303816000875af115801562000923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200094991906200288b565b61010088015160405163bd85b03960e01b815260006004820152919250906001600160a01b0384169063bd85b03990602401602060405180830381865afa15801562000999573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009bf91906200288b565b111562000a085760405162461bcd60e51b815260206004820152601660248201527513585e1a5b5d5b4818dbdc1a595cc81c995858da195960521b604482015260640162000707565b6040518181526001600160a01b038a169033907f11d98acd9bb3b842882be6ca4685c16bbd2913b62cf728fa039a86cf8ed3c5089060200160405180910390a3505050505050505050565b6001600160a01b038083166000908152600660205260409020805490911662000a905760405162461bcd60e51b81526004016200070790620027cb565b6000839050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ad4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000afa9190620028a5565b6001600160a01b0316336001600160a01b03161462000b675760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920626f6f6b206f776e65722063616e20736574206d617820636f7069604482015261657360f01b606482015260840162000707565b6000831162000bc55760405162461bcd60e51b8152602060048201526024808201527f4d617820636f70696573206d7573742062652067726561746572207468616e206044820152637a65726f60e01b606482015260840162000707565b600882018390556040518381526001600160a01b038516907fbceefaf234f5bceec8f188fc72efc599c104bcb6dfbcefe8053998f063311a73906020015b60405180910390a250505050565b6001600160a01b038083166000908152600660205260409020805490911662000c4e5760405162461bcd60e51b81526004016200070790620027cb565b6000839050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000c92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cb89190620028a5565b6001600160a01b0316336001600160a01b03161462000d1a5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c7920626f6f6b206f776e65722063616e20736574204950465320434944604482015260640162000707565b604051634e60c53160e11b81526001600160a01b03821690639cc18a629062000d4a9086903390600401620028c5565b600060405180830381600087803b15801562000d6557600080fd5b505af115801562000d7a573d6000803e3d6000fd5b50505060058301905062000d8f848262002944565b50836001600160a01b03167fed12fd7250feebdc6d04588df0094ba2a7cdd1510c4fa4dcb10548b0d388048d8460405162000c0391906200253f565b6001600160a01b038082166000908152600660209081526040808320815161014081019092528054909416815260018401805460609592938401919062000e12906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462000e40906200278f565b801562000e915780601f1062000e655761010080835404028352916020019162000e91565b820191906000526020600020905b81548152906001019060200180831162000e7357829003601f168201915b5050505050815260200160028201805462000eac906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462000eda906200278f565b801562000f2b5780601f1062000eff5761010080835404028352916020019162000f2b565b820191906000526020600020905b81548152906001019060200180831162000f0d57829003601f168201915b505050505081526020016003820154815260200160048201805462000f50906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462000f7e906200278f565b801562000fcf5780601f1062000fa35761010080835404028352916020019162000fcf565b820191906000526020600020905b81548152906001019060200180831162000fb157829003601f168201915b5050505050815260200160058201805462000fea906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001018906200278f565b8015620010695780601f106200103d5761010080835404028352916020019162001069565b820191906000526020600020905b8154815290600101906020018083116200104b57829003601f168201915b5050505050815260200160068201805462001084906200278f565b80601f0160208091040260200160405190810160405280929190818152602001828054620010b2906200278f565b8015620011035780601f10620010d75761010080835404028352916020019162001103565b820191906000526020600020905b815481529060010190602001808311620010e557829003601f168201915b505050918352505060078201546001600160a01b039081166020830152600883015460408301526009909201546060909101528151919250166200115b5760405162461bcd60e51b81526004016200070790620027cb565b60a0015192915050565b6001546001600160a01b031633146200117d57600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015620011c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011eb91906200288b565b9050806000036200120f57604051630686827b60e51b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af11580156200125f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001285919062002867565b50505050565b6001600160a01b0380821660009081526006602090815260408083208151610140810190925280549094168152600184018054606095929384019190620012d2906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001300906200278f565b8015620013515780601f10620013255761010080835404028352916020019162001351565b820191906000526020600020905b8154815290600101906020018083116200133357829003601f168201915b505050505081526020016002820180546200136c906200278f565b80601f01602080910402602001604051908101604052809291908181526020018280546200139a906200278f565b8015620013eb5780601f10620013bf57610100808354040283529160200191620013eb565b820191906000526020600020905b815481529060010190602001808311620013cd57829003601f168201915b505050505081526020016003820154815260200160048201805462001410906200278f565b80601f01602080910402602001604051908101604052809291908181526020018280546200143e906200278f565b80156200148f5780601f1062001463576101008083540402835291602001916200148f565b820191906000526020600020905b8154815290600101906020018083116200147157829003601f168201915b50505050508152602001600582018054620014aa906200278f565b80601f0160208091040260200160405190810160405280929190818152602001828054620014d8906200278f565b8015620015295780601f10620014fd5761010080835404028352916020019162001529565b820191906000526020600020905b8154815290600101906020018083116200150b57829003601f168201915b5050505050815260200160068201805462001544906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001572906200278f565b8015620015c35780601f106200159757610100808354040283529160200191620015c3565b820191906000526020600020905b815481529060010190602001808311620015a557829003601f168201915b505050918352505060078201546001600160a01b039081166020830152600883015460408301526009909201546060909101528151919250166200161b5760405162461bcd60e51b81526004016200070790620027cb565b60c0015192915050565b60008054600480546040516323b872dd60e01b8152339281019290925230602483015260448201526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801562001682573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016a8919062002867565b620017045760405162461bcd60e51b815260206004820152602560248201527f55534443207472616e7366657220666f72206372656174696f6e206665652066604482015264185a5b195960da1b606482015260840162000707565b60008787878733604051620017199062002379565b6200172995949392919062002a11565b604051809103906000f08015801562001746573d6000803e3d6000fd5b5060408051610140810182526001600160a01b0383811680835260208084018e81528486018e9052606085018d9052608085018c905260a085018b905260c085018a90523360e08601526103e8610100860152600061012086018190529283526006909152939020825181546001600160a01b03191692169190911781559151929350918291906001820190620017de908262002944565b5060408201516002820190620017f5908262002944565b50606082015160038201556080820151600482019062001816908262002944565b5060a082015160058201906200182d908262002944565b5060c0820151600682019062001844908262002944565b5060e08201516007820180546001600160a01b039283166001600160a01b031991821617909155610100840151600884015561012090930151600990920191909155600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180549185169190921681179091556040517f6194bb88dce0bc36657ecb009cce73e725a646310ad090862eeb79dc03a8fdda9062001902908c908c908b908b908b90339062002a71565b60405180910390a250509695505050505050565b6001600160a01b03808216600090815260066020908152604080832081516101408101909252805490941681526001840180549394859492939092908401919062001961906200278f565b80601f01602080910402602001604051908101604052809291908181526020018280546200198f906200278f565b8015620019e05780601f10620019b457610100808354040283529160200191620019e0565b820191906000526020600020905b815481529060010190602001808311620019c257829003601f168201915b50505050508152602001600282018054620019fb906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001a29906200278f565b801562001a7a5780601f1062001a4e5761010080835404028352916020019162001a7a565b820191906000526020600020905b81548152906001019060200180831162001a5c57829003601f168201915b505050505081526020016003820154815260200160048201805462001a9f906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001acd906200278f565b801562001b1e5780601f1062001af25761010080835404028352916020019162001b1e565b820191906000526020600020905b81548152906001019060200180831162001b0057829003601f168201915b5050505050815260200160058201805462001b39906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001b67906200278f565b801562001bb85780601f1062001b8c5761010080835404028352916020019162001bb8565b820191906000526020600020905b81548152906001019060200180831162001b9a57829003601f168201915b5050505050815260200160068201805462001bd3906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001c01906200278f565b801562001c525780601f1062001c265761010080835404028352916020019162001c52565b820191906000526020600020905b81548152906001019060200180831162001c3457829003601f168201915b505050918352505060078201546001600160a01b0390811660208301526008830154604083015260099092015460609091015281519192501662001caa5760405162461bcd60e51b81526004016200070790620027cb565b6060015192915050565b6001600160a01b038083166000908152600660205260409020805490911662001cf15760405162461bcd60e51b81526004016200070790620027cb565b6000839050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001d35573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d5b9190620028a5565b6001600160a01b0316336001600160a01b03161462001dbd5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c7920626f6f6b206f776e65722063616e20736574207072696365000000604482015260640162000707565b600382018390556040518381526001600160a01b038516907f0c43b17a7398cbc1eab4ede8acf79d82901ae3bc63b93fbce5ac142ddebf89b09060200162000c03565b600660205260009081526040902080546001820180546001600160a01b03909216929162001e2e906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001e5c906200278f565b801562001ead5780601f1062001e815761010080835404028352916020019162001ead565b820191906000526020600020905b81548152906001019060200180831162001e8f57829003601f168201915b50505050509080600201805462001ec4906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001ef2906200278f565b801562001f435780601f1062001f175761010080835404028352916020019162001f43565b820191906000526020600020905b81548152906001019060200180831162001f2557829003601f168201915b50505050509080600301549080600401805462001f60906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462001f8e906200278f565b801562001fdf5780601f1062001fb35761010080835404028352916020019162001fdf565b820191906000526020600020905b81548152906001019060200180831162001fc157829003601f168201915b50505050509080600501805462001ff6906200278f565b80601f016020809104026020016040519081016040528092919081815260200182805462002024906200278f565b8015620020755780601f10620020495761010080835404028352916020019162002075565b820191906000526020600020905b8154815290600101906020018083116200205757829003601f168201915b5050505050908060060180546200208c906200278f565b80601f0160208091040260200160405190810160405280929190818152602001828054620020ba906200278f565b80156200210b5780601f10620020df576101008083540402835291602001916200210b565b820191906000526020600020905b815481529060010190602001808311620020ed57829003601f168201915b505050506007830154600884015460099094015492936001600160a01b03909116929091508a565b6001600160a01b0380831660009081526006602052604090208054909116620021705760405162461bcd60e51b81526004016200070790620027cb565b6000839050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620021b4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021da9190620028a5565b6001600160a01b0316336001600160a01b0316146200224b5760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920626f6f6b206f776e65722063616e2073657420636f7665722049506044820152651194c810d25160d21b606482015260840162000707565b600682016200225b848262002944565b50836001600160a01b03167f63d3981ff48b4ced41b66689cd56a390c7329fab4f6df685758215572a251f0d8460405162000c0391906200253f565b60606005805480602002602001604051908101604052809291908181526020018280548015620022f157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620022d2575b5050505050905090565b6001546001600160a01b031633146200231357600080fd5b60048190556040518181527f88a973fd5506071e0cf878b30898776c47d5250a7ee1e6ee0b36df3b03c7c16a9060200160405180910390a150565b600581815481106200235f57600080fd5b6000918252602090912001546001600160a01b0316905081565b61277b8062002af983390190565b6001600160a01b03811681146200239d57600080fd5b50565b60008060408385031215620023b457600080fd5b8235620023c18162002387565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620023f757600080fd5b813567ffffffffffffffff80821115620024155762002415620023cf565b604051601f8301601f19908116603f01168101908282118183101715620024405762002440620023cf565b816040528381528660208588010111156200245a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156200248e57600080fd5b82356200249b8162002387565b9150602083013567ffffffffffffffff811115620024b857600080fd5b620024c685828601620023e5565b9150509250929050565b600060208284031215620024e357600080fd5b8135620024f08162002387565b9392505050565b6000815180845260005b818110156200251f5760208185018101518683018201520162002501565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000620024f06020830184620024f7565b600080604083850312156200256857600080fd5b8235620025758162002387565b91506020830135620025878162002387565b809150509250929050565b60008060008060008060c08789031215620025ac57600080fd5b863567ffffffffffffffff80821115620025c557600080fd5b620025d38a838b01620023e5565b97506020890135915080821115620025ea57600080fd5b620025f88a838b01620023e5565b96506040890135955060608901359150808211156200261657600080fd5b620026248a838b01620023e5565b945060808901359150808211156200263b57600080fd5b620026498a838b01620023e5565b935060a08901359150808211156200266057600080fd5b506200266f89828a01620023e5565b9150509295509295509295565b6001600160a01b038b8116825261014060208301819052600091620026a48483018e620024f7565b91508382036040850152620026ba828d620024f7565b91508a60608501528382036080850152620026d6828b620024f7565b915083820360a0850152620026ec828a620024f7565b915083820360c0850152620027028289620024f7565b961660e0840152505061010081019290925261012090910152979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620027695783516001600160a01b03168352928401929184019160010162002742565b50909695505050505050565b6000602082840312156200278857600080fd5b5035919050565b600181811c90821680620027a457607f821691505b602082108103620027c557634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260139082015272109bdbdac8191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417620028285762002828620027f8565b92915050565b6000826200284c57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115620028285762002828620027f8565b6000602082840312156200287a57600080fd5b81518015158114620024f057600080fd5b6000602082840312156200289e57600080fd5b5051919050565b600060208284031215620028b857600080fd5b8151620024f08162002387565b604081526000620028da6040830185620024f7565b905060018060a01b03831660208301529392505050565b601f8211156200293f57600081815260208120601f850160051c810160208610156200291a5750805b601f850160051c820191505b818110156200293b5782815560010162002926565b5050505b505050565b815167ffffffffffffffff811115620029615762002961620023cf565b62002979816200297284546200278f565b84620028f1565b602080601f831160018114620029b15760008415620029985750858301515b600019600386901b1c1916600185901b1785556200293b565b600085815260208120601f198616915b82811015620029e257888601518255948401946001909101908401620029c1565b508582101562002a015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60a08152600062002a2660a0830188620024f7565b828103602084015262002a3a8188620024f7565b9050856040840152828103606084015262002a568186620024f7565b91505060018060a01b03831660808301529695505050505050565b60c08152600062002a8660c0830189620024f7565b828103602084015262002a9a8189620024f7565b9050828103604084015262002ab08188620024f7565b9050828103606084015262002ac68187620024f7565b9050828103608084015262002adc8186620024f7565b91505060018060a01b03831660a083015297965050505050505056fe608060405260016009553480156200001657600080fd5b506040516200277b3803806200277b83398101604081905262000039916200029b565b84846000620000498382620003e9565b506001620000588282620003e9565b505050620000756200006f6200009f60201b60201c565b620000a3565b600e839055600f620000888382620003e9565b506200009481620000f5565b5050505050620004b5565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620000ff62000178565b6001600160a01b0381166200016a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200017581620000a3565b50565b6007546001600160a01b03163314620001d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000161565b565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001fe57600080fd5b81516001600160401b03808211156200021b576200021b620001d6565b604051601f8301601f19908116603f01168101908282118183101715620002465762000246620001d6565b816040528381526020925086838588010111156200026357600080fd5b600091505b8382101562000287578582018301518183018401529082019062000268565b600093810190920192909252949350505050565b600080600080600060a08688031215620002b457600080fd5b85516001600160401b0380821115620002cc57600080fd5b620002da89838a01620001ec565b96506020880151915080821115620002f157600080fd5b620002ff89838a01620001ec565b95506040880151945060608801519150808211156200031d57600080fd5b506200032c88828901620001ec565b608088015190935090506001600160a01b03811681146200034c57600080fd5b809150509295509295909350565b600181811c908216806200036f57607f821691505b6020821081036200039057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003e457600081815260208120601f850160051c81016020861015620003bf5750805b601f850160051c820191505b81811015620003e057828155600101620003cb565b5050505b505050565b81516001600160401b03811115620004055762000405620001d6565b6200041d816200041684546200035a565b8462000396565b602080601f8311600181146200045557600084156200043c5750858301515b600019600386901b1c1916600185901b178555620003e0565b600085815260208120601f198616915b82811015620004865788860151825594840194600190910190840162000465565b5085821015620004a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6122b680620004c56000396000f3fe6080604052600436106101c25760003560e01c80637800a7ef116100f7578063bd85b03911610095578063f2fde38b11610064578063f2fde38b14610508578063f46eccc414610528578063f839228214610596578063ff0a41e5146105b657600080fd5b8063bd85b03914610493578063c87b56dd146104b3578063e7c711f4146104d3578063e985e9c5146104e857600080fd5b806395d89b41116100d157806395d89b411461041e5780639cc18a6214610433578063a22cb46514610453578063b88d4fde1461047357600080fd5b80637800a7ef146103ca5780637e702779146103e05780638da5cb5b1461040057600080fd5b806342842e0e116101645780636e9164f41161013e5780636e9164f41461034957806370a082311461035f578063715018a61461037f57806374eb1e5f1461039457600080fd5b806342842e0e146102e957806358c88ce3146103095780636352211e1461032957600080fd5b8063081812fc116101a0578063081812fc14610242578063095ea7b31461027a57806320cacfa01461029c57806323b872dd146102c957600080fd5b806301ffc9a7146101c757806306e21956146101fc57806306fdde0314610220575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611b64565b6105c9565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b5061021260095481565b6040519081526020016101f3565b34801561022c57600080fd5b506102356105f4565b6040516101f39190611bd1565b34801561024e57600080fd5b5061026261025d366004611be4565b610686565b6040516001600160a01b0390911681526020016101f3565b34801561028657600080fd5b5061029a610295366004611c12565b6106ad565b005b3480156102a857600080fd5b506102126102b7366004611be4565b60126020526000908152604090205481565b3480156102d557600080fd5b5061029a6102e4366004611c3e565b6107c7565b3480156102f557600080fd5b5061029a610304366004611c3e565b6107f8565b34801561031557600080fd5b5061029a610324366004611c7f565b610813565b34801561033557600080fd5b50610262610344366004611be4565b610889565b34801561035557600080fd5b50610212600e5481565b34801561036b57600080fd5b5061021261037a366004611ca1565b6108e9565b34801561038b57600080fd5b5061029a61096f565b3480156103a057600080fd5b506103b46103af366004611ca1565b610983565b6040516101f39a99989796959493929190611cbe565b3480156103d657600080fd5b50610212600a5481565b3480156103ec57600080fd5b5061029a6103fb366004611e0a565b610c8e565b34801561040c57600080fd5b506007546001600160a01b0316610262565b34801561042a57600080fd5b50610235610e1a565b34801561043f57600080fd5b5061029a61044e366004611e5a565b610e29565b34801561045f57600080fd5b5061029a61046e366004611eac565b610ee7565b34801561047f57600080fd5b5061029a61048e366004611edf565b610ef6565b34801561049f57600080fd5b506102126104ae366004611be4565b610f2e565b3480156104bf57600080fd5b506102356104ce366004611be4565b610f44565b3480156104df57600080fd5b50610235611047565b3480156104f457600080fd5b506101e7610503366004611f5f565b611056565b34801561051457600080fd5b5061029a610523366004611ca1565b611084565b34801561053457600080fd5b50610570610543366004611ca1565b60086020526000908152604090208054600182015460028301546003909301549192909160ff9091169084565b6040805194855260208501939093529015159183019190915260608201526080016101f3565b3480156105a257600080fd5b506102626105b1366004611be4565b6110fd565b6102126105c4366004611ca1565b611127565b60006001600160e01b03198216632483248360e11b14806105ee57506105ee82611208565b92915050565b60606000805461060390611f8d565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90611f8d565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b5050505050905090565b600061069182611258565b506000908152600460205260409020546001600160a01b031690565b60006106b882610889565b9050806001600160a01b0316836001600160a01b03160361072a5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061074657506107468133611056565b6107b85760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610721565b6107c283836112b7565b505050565b6107d13382611325565b6107ed5760405162461bcd60e51b815260040161072190611fc7565b6107c2838383611383565b6107c283838360405180602001604052806000815250610ef6565b61081b6114e7565b600081116108775760405162461bcd60e51b8152602060048201526024808201527f4d617820636f70696573206d7573742062652067726561746572207468616e206044820152637a65726f60e01b6064820152608401610721565b60009182526012602052604090912055565b6000818152600260205260408120546001600160a01b0316806105ee5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610721565b60006001600160a01b0382166109535760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610721565b506001600160a01b031660009081526003602052604090205490565b6109776114e7565b6109816000611541565b565b600c60205260009081526040902080546001820180546001600160a01b0390921692916109af90611f8d565b80601f01602080910402602001604051908101604052809291908181526020018280546109db90611f8d565b8015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b505050505090806002018054610a3d90611f8d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6990611f8d565b8015610ab65780601f10610a8b57610100808354040283529160200191610ab6565b820191906000526020600020905b815481529060010190602001808311610a9957829003601f168201915b505050505090806003015490806004018054610ad190611f8d565b80601f0160208091040260200160405190810160405280929190818152602001828054610afd90611f8d565b8015610b4a5780601f10610b1f57610100808354040283529160200191610b4a565b820191906000526020600020905b815481529060010190602001808311610b2d57829003601f168201915b505050505090806005018054610b5f90611f8d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8b90611f8d565b8015610bd85780601f10610bad57610100808354040283529160200191610bd8565b820191906000526020600020905b815481529060010190602001808311610bbb57829003601f168201915b505050505090806006018054610bed90611f8d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1990611f8d565b8015610c665780601f10610c3b57610100808354040283529160200191610c66565b820191906000526020600020905b815481529060010190602001808311610c4957829003601f168201915b505050506007830154600884015460099094015492936001600160a01b03909116929091508a565b6001600160a01b038083166000908152600c602052604090208054909116610cee5760405162461bcd60e51b8152602060048201526013602482015272109bdbdac8191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610721565b6000839050806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d559190612014565b6001600160a01b0316336001600160a01b031614610dc45760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920626f6f6b206f776e65722063616e2073657420636f7665722049506044820152651194c810d25160d21b6064820152608401610721565b60068201610dd2848261207f565b50836001600160a01b03167f63d3981ff48b4ced41b66689cd56a390c7329fab4f6df685758215572a251f0d84604051610e0c9190611bd1565b60405180910390a250505050565b60606001805461060390611f8d565b6007546001600160a01b03828116911614610e765760405162461bcd60e51b815260206004820152600d60248201526c2737ba103a34329037bbb732b960991b6044820152606401610721565b60115460ff1615610ec95760405162461bcd60e51b815260206004820181905260248201527f626f6f6b497066734369642068617320616c7265616479206265656e207365746044820152606401610721565b6010610ed5838261207f565b50506011805460ff1916600117905550565b610ef2338383611593565b5050565b610f003383611325565b610f1c5760405162461bcd60e51b815260040161072190611fc7565b610f2884848484611661565b50505050565b600081610f3a600d5490565b6105ee919061213f565b6060610f4f82611258565b60008281526006602052604081208054610f6890611f8d565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9490611f8d565b8015610fe15780601f10610fb657610100808354040283529160200191610fe1565b820191906000526020600020905b815481529060010190602001808311610fc457829003601f168201915b505050505090506000610ff2611694565b90508051600003611004575092915050565b81511561103657808260405160200161101e929190612160565b60405160208183030381529060405292505050919050565b61103f846116a3565b949350505050565b60606010805461060390611f8d565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61108c6114e7565b6001600160a01b0381166110f15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610721565b6110fa81611541565b50565b600b818154811061110d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600e54341461116c5760405162461bcd60e51b815260206004820152600f60248201526e496e636f727265637420707269636560881b6044820152606401610721565b6000611177600d5490565b60008181526012602052604090205490915061119282610f2e565b106111f05760405162461bcd60e51b815260206004820152602860248201527f4d6178696d756d20636f70696573207265616368656420666f722074686973206044820152671d1bdad95b88125160c21b6064820152608401610721565b6111fe600d80546001019055565b6105ee838261170a565b60006001600160e01b031982166380ac58cd60e01b148061123957506001600160e01b03198216635b5e139f60e01b145b806105ee57506301ffc9a760e01b6001600160e01b03198316146105ee565b6000818152600260205260409020546001600160a01b03166110fa5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610721565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112ec82610889565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061133183610889565b9050806001600160a01b0316846001600160a01b0316148061135857506113588185611056565b8061103f5750836001600160a01b031661137184610686565b6001600160a01b031614949350505050565b826001600160a01b031661139682610889565b6001600160a01b0316146113bc5760405162461bcd60e51b81526004016107219061218f565b6001600160a01b03821661141e5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610721565b826001600160a01b031661143182610889565b6001600160a01b0316146114575760405162461bcd60e51b81526004016107219061218f565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546001600160a01b031633146109815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610721565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036115f45760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610721565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61166c848484611383565b61167884848484611724565b610f285760405162461bcd60e51b8152600401610721906121d4565b6060600f805461060390611f8d565b60606116ae82611258565b60006116b8611694565b905060008151116116d85760405180602001604052806000815250611703565b806116e284611825565b6040516020016116f3929190612160565b6040516020818303038152906040525b9392505050565b610ef28282604051806020016040528060008152506118b8565b60006001600160a01b0384163b1561181a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611768903390899088908890600401612226565b6020604051808303816000875af19250505080156117a3575060408051601f3d908101601f191682019092526117a091810190612263565b60015b611800573d8080156117d1576040519150601f19603f3d011682016040523d82523d6000602084013e6117d6565b606091505b5080516000036117f85760405162461bcd60e51b8152600401610721906121d4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061103f565b506001949350505050565b60606000611832836118eb565b600101905060008167ffffffffffffffff81111561185257611852611d5e565b6040519080825280601f01601f19166020018201604052801561187c576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461188657509392505050565b6118c283836119c3565b6118cf6000848484611724565b6107c25760405162461bcd60e51b8152600401610721906121d4565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061192a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611956576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061197457662386f26fc10000830492506010015b6305f5e100831061198c576305f5e100830492506008015b61271083106119a057612710830492506004015b606483106119b2576064830492506002015b600a83106105ee5760010192915050565b6001600160a01b038216611a195760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610721565b6000818152600260205260409020546001600160a01b031615611a7e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610721565b6000818152600260205260409020546001600160a01b031615611ae35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610721565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146110fa57600080fd5b600060208284031215611b7657600080fd5b813561170381611b4e565b60005b83811015611b9c578181015183820152602001611b84565b50506000910152565b60008151808452611bbd816020860160208601611b81565b601f01601f19169290920160200192915050565b6020815260006117036020830184611ba5565b600060208284031215611bf657600080fd5b5035919050565b6001600160a01b03811681146110fa57600080fd5b60008060408385031215611c2557600080fd5b8235611c3081611bfd565b946020939093013593505050565b600080600060608486031215611c5357600080fd5b8335611c5e81611bfd565b92506020840135611c6e81611bfd565b929592945050506040919091013590565b60008060408385031215611c9257600080fd5b50508035926020909101359150565b600060208284031215611cb357600080fd5b813561170381611bfd565b6001600160a01b038b8116825261014060208301819052600091611ce48483018e611ba5565b91508382036040850152611cf8828d611ba5565b91508a60608501528382036080850152611d12828b611ba5565b915083820360a0850152611d26828a611ba5565b915083820360c0850152611d3a8289611ba5565b961660e0840152505061010081019290925261012090910152979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611d8f57611d8f611d5e565b604051601f8501601f19908116603f01168101908282118183101715611db757611db7611d5e565b81604052809350858152868686011115611dd057600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611dfb57600080fd5b61170383833560208501611d74565b60008060408385031215611e1d57600080fd5b8235611e2881611bfd565b9150602083013567ffffffffffffffff811115611e4457600080fd5b611e5085828601611dea565b9150509250929050565b60008060408385031215611e6d57600080fd5b823567ffffffffffffffff811115611e8457600080fd5b611e9085828601611dea565b9250506020830135611ea181611bfd565b809150509250929050565b60008060408385031215611ebf57600080fd5b8235611eca81611bfd565b915060208301358015158114611ea157600080fd5b60008060008060808587031215611ef557600080fd5b8435611f0081611bfd565b93506020850135611f1081611bfd565b925060408501359150606085013567ffffffffffffffff811115611f3357600080fd5b8501601f81018713611f4457600080fd5b611f5387823560208401611d74565b91505092959194509250565b60008060408385031215611f7257600080fd5b8235611f7d81611bfd565b91506020830135611ea181611bfd565b600181811c90821680611fa157607f821691505b602082108103611fc157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60006020828403121561202657600080fd5b815161170381611bfd565b601f8211156107c257600081815260208120601f850160051c810160208610156120585750805b601f850160051c820191505b8181101561207757828155600101612064565b505050505050565b815167ffffffffffffffff81111561209957612099611d5e565b6120ad816120a78454611f8d565b84612031565b602080601f8311600181146120e257600084156120ca5750858301515b600019600386901b1c1916600185901b178555612077565b600085815260208120601f198616915b82811015612111578886015182559484019460019091019084016120f2565b508582101561212f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103818111156105ee57634e487b7160e01b600052601160045260246000fd5b60008351612172818460208801611b81565b835190830190612186818360208801611b81565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061225990830184611ba5565b9695505050505050565b60006020828403121561227557600080fd5b815161170381611b4e56fea26469706673582212208281bd38e0e762eb741d72c40418696bd20bee67364e3afcea9aeee5e10234b464736f6c63430008140033a2646970667358221220ff37f8fb2af9df31a4575f0b7de15285cb660e14d3c40f052cf1b0a97a7856b164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3504,
        "contract": "contracts/BookFactory.sol:BookFactory",
        "label": "usdcToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)218"
      },
      {
        "astId": 3506,
        "contract": "contracts/BookFactory.sol:BookFactory",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3511,
        "contract": "contracts/BookFactory.sol:BookFactory",
        "label": "minters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Minter)3501_storage)"
      },
      {
        "astId": 3514,
        "contract": "contracts/BookFactory.sol:BookFactory",
        "label": "feePercentageForPurchase",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3516,
        "contract": "contracts/BookFactory.sol:BookFactory",
        "label": "feeForCreation",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3519,
        "contract": "contracts/BookFactory.sol:BookFactory",
        "label": "bookAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3524,
        "contract": "contracts/BookFactory.sol:BookFactory",
        "label": "books",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(BookInfo)3492_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)218": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(BookInfo)3492_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BookFactory.BookInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BookInfo)3492_storage"
      },
      "t_mapping(t_address,t_struct(Minter)3501_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BookFactory.Minter)",
        "numberOfBytes": "32",
        "value": "t_struct(Minter)3501_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BookInfo)3492_storage": {
        "encoding": "inplace",
        "label": "struct BookFactory.BookInfo",
        "members": [
          {
            "astId": 3473,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "bookAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3475,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3477,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "symbol",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3479,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3481,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "baseURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3483,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "bookIpfsCid",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 3485,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "coverIpfsCid",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3487,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "creator",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3489,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "maxCopies",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3491,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "totalSupply",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Minter)3501_storage": {
        "encoding": "inplace",
        "label": "struct BookFactory.Minter",
        "members": [
          {
            "astId": 3494,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "minted",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3496,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "mintedAtBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3498,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "hasMintedBefore",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 3500,
            "contract": "contracts/BookFactory.sol:BookFactory",
            "label": "minter_AllTime_Minted",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}